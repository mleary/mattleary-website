[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "matt_leary",
    "section": "",
    "text": "Generating my resume with {pagedown}\n\n\n\nR\n\n\npagedown\n\n\n\nCreating a daynamic resume I can easily update and share with R, {pagedown}, and some basic {rmarkdown} functionality,\n\n\n\nMatt Leary\n\n\nJul 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMoving to a Quarto website\n\n\n\nQuarto\n\n\nR\n\n\n\nUpdating my previous {blogdown} website with RStudio and Quarto (an open-source scientific and technical publishing system.\n\n\n\nMatt Leary\n\n\nJul 7, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html",
    "href": "posts/2023-07-08_resume_pagedown/index.html",
    "title": "Generating my resume with {pagedown}",
    "section": "",
    "text": "I took an old post generated on my previous {blogdown} website and ported it over to quarto. I made slight updates to line it up with current format, but otherwise tried to just reuse the old material found here.\n\nYihui Xie & Romain Lesur’s {pagedown} package allows users to create paged HTML documents that can be easily printed as PDFs. This includes RMarkdown templates that let you create letters, business cards, and most importantly resumes. I previously explored using {pagedown} for my resume and was impressed with the unique look it provided. That said, I never actually finished my exploration and I recently wanted to go back to {pagedown} and create a new resume."
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html#refreshing-an-old-post",
    "href": "posts/2023-07-08_resume_pagedown/index.html#refreshing-an-old-post",
    "title": "Generating my resume with {pagedown}",
    "section": "",
    "text": "I took an old post generated on my previous {blogdown} website and ported it over to quarto. I made slight updates to line it up with current format, but otherwise tried to just reuse the old material found here.\n\nYihui Xie & Romain Lesur’s {pagedown} package allows users to create paged HTML documents that can be easily printed as PDFs. This includes RMarkdown templates that let you create letters, business cards, and most importantly resumes. I previously explored using {pagedown} for my resume and was impressed with the unique look it provided. That said, I never actually finished my exploration and I recently wanted to go back to {pagedown} and create a new resume."
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html#intent",
    "href": "posts/2023-07-08_resume_pagedown/index.html#intent",
    "title": "Generating my resume with {pagedown}",
    "section": "Intent",
    "text": "Intent\nI had four main goals with this project:\n\nCreate a resume format that was unique but not overly “flashy”\nModify pagedown’s base styling to work on my understanding of CSS\nCreate two versions, an HTML document for the web and a basic pdf for printing\nDevelop a process that made it easy to update my resume periodically (see the repo here)\n\n**Acknowledgement: Shout out to Nick Strayer, whose code was the basis for my format. I heavily borrowed from his code and approach. See his resume here"
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html#creating-my-custom-resume",
    "href": "posts/2023-07-08_resume_pagedown/index.html#creating-my-custom-resume",
    "title": "Generating my resume with {pagedown}",
    "section": "Creating my custom resume",
    "text": "Creating my custom resume\nAfter some quick research on {pagedown} examples, I stumbled upon Nick Strayer’s resume. I liked the subtle changes he made to the base {pagedown::html_resume}, and decided to leverage his format & approach. For example, I really liked his use of “skill bars” to highlight his coding experience.\n\nlibrary(tidyverse)\n\nresume_data &lt;- readr::read_csv('https://raw.githubusercontent.com/mleary/resume/main/data/skill_data.csv')\n\ndevtools::source_url(\"https://raw.githubusercontent.com/mleary/resume/master/helper_functions.R\")\n\nbuild_skill_bars(resume_data, \"Tech\")"
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html#main-efforts",
    "href": "posts/2023-07-08_resume_pagedown/index.html#main-efforts",
    "title": "Generating my resume with {pagedown}",
    "section": "Main efforts",
    "text": "Main efforts\nHere some of my major steps I took to fully leverage {pagedown} resume template.\n\nUpdating the CSS\nWith limited CSS experience, this step took the longest as I explored CSS syntax and the resulting output. I’ll ignore the actual CSS code and the changes I made, but the process of adding a custom CSS file was simple. First, create a .css file with the changes you want to make. After that, add a few lines of code to the YAML header of the markdown template (seen below).\n\noutput:\n\npagedown::html_resume:\n\ncss: \\['css/custom_resume.css', 'css/styles_html.css', 'resume'\\]\nNote that with this setup, the base CSS template is still used but is overwritten by my custom CSS files. I also created a css folder to house the files, which appeared to be a best practice.\n\n\nCreating an Excel file for data\nRather than hard coding my work and education experience in the Markdown document, I liked the approach of creating a separate excel file with all the necessary data for my resume. This way it is easier to update my experience and in theory I could use that file to populate different resume versions, websites, etc..\n\n\nProducing multiple versions\nI wanted to create two different versions of my resume, one with color and a plain version for easier printing. That said, I did not want to maintain to separate RMarkdown documents since that would require me to update TWO documents to ensure they were both always up to date. While this wouldn’t be an overwhelming burden, I also suspected it would lead to two versions with minor differences.\nUsing the render function from the **rmarkdown** package, I was able to easily update both versions at the same time. With this function, you can take an rmarkdown file and control some of the output settings. For example, I was able to control the output file name, the css settings, and any individual parameter settings used in the YAML settings.\n\nrmarkdown::render(input = \"resume.Rmd\",\n  output_file = \"index.html\",\n  output_options = list(css = c('css/custom_resume.css', 'css/styles_html.css', 'resume'),\n  self_contained = FALSE\n  ),\n  params = list(doctype = \"HTML\")\n)\n\nrmarkdown::render(input = \"resume.Rmd\",\n  output_file = \"mleary_resume.html\",\n  output_options = list(\n    css = c('css/custom_resume.css', 'css/styles_pdf.css', 'resume')\n  ),\n  params = list(doctype = \"PDF\")\n)\nThis was really helpful to learn for future projects. Saving the output as a different name is something that could helpful in other circumstances. For routine reports that might be ran periodically, it would be helpful to use this function to save the output with the current date. Another use case would be to create template format and than create multiple outputs for a list of items using the **purrr** package."
  },
  {
    "objectID": "posts/2023-07-08_resume_pagedown/index.html#lessons-learned",
    "href": "posts/2023-07-08_resume_pagedown/index.html#lessons-learned",
    "title": "Generating my resume with {pagedown}",
    "section": "Lessons Learned",
    "text": "Lessons Learned\nThe process was relatively straightforward and lead to learning several new R tips that could be applied elsewhere. My major takeaways are listed below.\n* Google is your friend. The {pagedown} documentation was great, but finding Nick’s example really helped me develop a resume I liked.\n* Rmarkdown is awesome. I already thought this, but a simple trick like rendering an existing Rmarkdown with specific parameters means I can know do even more with the package.\n* CSS styling is nuanced, but it also adds a lot. I am not a CSS expert, but with some simple research and a LOT of experimentation I was able to quickly make changes. I’ve used CSS to create a custom {rmarkdown} template at work, and that little addition really makes the report stand out."
  },
  {
    "objectID": "posts/2023-07-07_moving-to-quarto/index.html",
    "href": "posts/2023-07-07_moving-to-quarto/index.html",
    "title": "Moving to a Quarto website",
    "section": "",
    "text": "After many months (years?) of not really touching my personal website, I am working to update my website and truly delve into using quarto for analysis and publication. This initial post will be a short summary of my efforts to get started, document some of the resources I found and used, and a starting point for what will *hopefully* become a regularly updated post.\n\nLessons learned\n\nI had an existing template, after a few hours I was able to follow blogs by Sam Csik and Bea Milz to help me create a seperate posts section, add a footer, and generally make some customizations I really liked.\n\nSam Csik blog\nBea Milz website I reviewed for ideas and code snippets\n\nUsing a custom domain is relatively simple, but it took some configuring to get it right.\n\nGithub docs\n\nUsed the section entitled Configuring an apex domain\n\nRandom YouTube video that helped visual the process\n\nRealized I might want to setup a Github Actions workflow instead of rendering locally. Not sure on that yet.\nBring over old .Rmd files used in my previous {blogdown} format was clunky\n\nNot sure if it was simply a copy paste issue, but I took an old post and tried to move it over. Quarto seemed to have some new syntax and it proved to be a little bit of a hassle. Again, this might have been user error on the first go round but I might just focus on starting fresh moving forward.\n\nConsolidating\n\nI have created several other websites with Github. Debating if I want to link to those, move that content into this website, or refactor those as quarto webpages."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "matt_leary",
    "section": "",
    "text": "Hi!\nI am a data scientist working in the insurance industry and I enjoy building tools that help people work more efficiently. I work regularly with R and Python, but R will always be my preferred language for analysis and machine learning. I am frequently working with SQL and Git (DevOps or Github), and have experience with cloud computing such as AWS, Azure, and Databricks.\nOutside of work, I am the proud father of two tiny humans and an avid Tottenham Hotspur fan. I previously worked in public policy/public relations, and spent a few years in the Army*.\n*Fun fact, you run and workout a LOT less when no one is yelling at you to do so."
  }
]