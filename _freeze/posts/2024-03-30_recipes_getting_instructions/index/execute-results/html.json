{
  "hash": "3801fb7fafc1520645bf485d48707e17",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"A Recipe for change - Creating a new recipe and image with OpenAI\"\ndescription: \"Can we create recipes my family will like?  Making a recipe for healthy banana bread with my kids.\"\ndate: \"2024-03-30\"\nimage: \"nora_image.jpg\"\ncategories: [Quarto, Python, OpenAI]\ninclude-in-header:\n  - text: |\n      <style>\n      .cell-output-stdout code {\n        word-break: break-wor !important;\n        white-space: pre-wrap !important;\n      }\n      </style>\n\n---\n\nFor this project, I wanted to create a recipe for healthy banana bread that my kids would enjoy. I used OpenAI to generate the recipe and ingredients list, used that output to make the recipe with my two daughters (Nora and Tess) and then we used OpenAI to generate an images of the recipe being made.  If you haven't explored the world of prompt engineering  with a 3.5 and 5.5 year old, I can't explain the strange requests you might get. Also, I can't say 3 and 5 year old, because the half year is apparently very important.\n\nI hope you enjoy the recipe and the images, it was a lot of fun for us to work on it together!\nI'll walk through some of the prompt engineering we explored along the way.\n\n### Setting up the system and role prompts\n\nFirst step, we need to set up the system and user prompts.  The system prompt is the role of the AI system, and the user prompt is the request we are making of the AI system.  So the system prompt defines `HOW` the the AI system should respond, and the user prompt defines `WHAT` we are asking the AI to do. the system prompt can be useful if you have multiple requests and want to keep the response consistent without having to repeat the same set of instructions each time. You can also use it to define the output format, such as JSON, or to specify any other requirements for the response. Again I found this helpful since I had a specific data format I wanted.\n\nIn this case, we are asking the AI to generate a recipe for healthy banana bread that kids will enjoy eating, and to use sugar alternatives as much as possible, such as honey or maple syrup.\n\n#### Our system prompt is as follows:\n\n> `\"You are a culinary expert who specializes in creating simple but delicious meals.  You will output a quick summary of the meal in a json format contain two key value pairs.  First, a key \"ingredients\" which has the list of ingredients. Second, a key \"steps\", which has a step-by-step process for cooking the meal. The preference is to create meals with common ingredients and as few as ingredients as needed.\"`\n\n#### Our user prompt is as follows:\n\n> `\"I need a recipe for healthy banana bread, one that kids will enjoy eating.  I prefer to use sugar alternatives as much as possible, such as honey or maple syrup.\"`\n\n::: {#b3aa7e57 .cell execution_count=1}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\nrole_system = '''\n\"You are a culinary expert who specializes in creating simple but delicious meals.  You will output a quick summary of the meal in a json format contain two key value pairs.  First, a key \"ingredients\" which has the list of ingredients. Second, a key \"steps\", which has a step-by-step process for cooking the meal. The preference is to create meals with common ingredients and as few as ingredients as needed.\"\n'''\n\nrole_user =\"I need a recipe for healthy banana bread, one that kids will enjoy eating.  I prefer to use sugar alternatives as much as possible, such as honey or maple syrup.\"\n```\n:::\n\n\n### Using OpenAI to generate recipe and ingredients list\n\nNow that we have our system and user prompts set up, we can use OpenAI to generate the recipe and ingredients list for healthy banana bread. We will pass in the system and user prompts to the OpenAI API and get back a response with the generated data. We will then extract the data from the response and convert it into a Python object that we can work with.\n\n**Note: I didn't want to continually rerun the OPENAI API call, so I saved the result.  This code doesn't actually run now and I just open up the saved data file.**\n\n::: {#d628ed85 .cell execution_count=2}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\nfrom openai import OpenAI\nimport os\nfrom secret_keys import OPENAI_KEY\nimport json\n\n# Create a completion with the OpenAI API\nclient = OpenAI(api_key=OPENAI_KEY)\n\ncompletion = client.chat.completions.create(\n  model=\"gpt-4-0125-preview\",\n  response_format={ \"type\": \"json_object\" },\n  messages=[\n    {\"role\": \"system\", \"content\": role_system},\n    {\"role\": \"user\", \"content\": role_user}\n  ]\n)\n\n# Extract the generated data from the completion object\nresponse_data = completion.choices[0].message.content\n\n# Convert the JSON string into a Python object\ndata_dict = json.loads(response_data)\n\n#with open('data.json', 'w') as file:\n#    json.dump(data_dict, file)\n```\n:::\n\n\n::: {#a41499b2 .cell execution_count=3}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\nimport json\n\nwith open('./data.json', 'r') as file:\n  data_dict = json.load(file)\n```\n:::\n\n\nAnd now we have the recipe and ingredients list for healthy banana bread that kids will enjoy eating. Let's take a look at the ingredients and recipe steps.\n\n### The Ingredients we need \n\n::: {#940060d8 .cell execution_count=4}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\ningredients = data_dict['ingredients']\n\nmarkdown_list = \"\\n\".join(f\"- {ingredient}\" for ingredient in ingredients)\n\nprint(markdown_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n- 3 ripe bananas\n- 1/3 cup melted coconut oil\n- 1/2 cup honey or maple syrup\n- 2 eggs\n- 1 teaspoon vanilla extract\n- 1/4 cup milk or a milk alternative\n- 1 teaspoon baking soda\n- 1/2 teaspoon salt\n- 1/2 teaspoon cinnamon\n- 1 3/4 cups whole wheat flour\n- Optional: 1/2 cup mix-ins such as chopped nuts, chocolate chips, or dried fruit\n```\n:::\n:::\n\n\n### The Recipe\n\n::: {#61662e4e .cell execution_count=5}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\ningredients = data_dict['steps']\n\nmarkdown_list = \"\\n\".join(f\"- {ingredient}\" for ingredient in ingredients)\n\nprint(markdown_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n- Preheat your oven to 325°F (165°C) and grease a 9x5-inch loaf pan.\n- In a large bowl, mash the ripe bananas with a fork until completely smooth. Stir the melted coconut oil into the mashed bananas.\n- Mix in the honey or maple syrup, beaten eggs, and vanilla extract. Then mix in the milk.\n- Add the baking soda, salt, and cinnamon, and stir into the batter. Lastly, mix in the flour, just until combined. If you're adding any mix-ins, gently fold them in now.\n- Pour the batter into your greased loaf pan and sprinkle a little cinnamon on top for extra flavor.\n- Bake for 55 to 60 minutes, or until a toothpick inserted into the center comes out clean. Let the bread cool in the pan for a few minutes, then transfer it to a wire rack to cool completely before slicing.\n- Enjoy your healthy banana bread as is, or toast slices and serve with a spread of nut butter for an extra protein boost.\n```\n:::\n:::\n\n\nI took those ingredients and recipe steps and made the recipe with my two daughters.  The result was as good as any store bought mixes or recipes we have found online.  \n\n### The Image Generation\n\nAfter we made the recipe, we used OpenAI's DALL-E to generate an image of the recipe being made.  We used the following prompt to generate the image, courtesy of Nora::  \n\n> `\"I want a cartoon image of a a father and his two daughters in their kitchen putting a dish into the oven with the healthy banana bread batter they just made.  The two daughter are Nora and Tess, Nora is wearing a sparkly dress and Tess is wearing  paw patrol shirt with pink pants.\"`\n\n::: {#01372e08 .cell execution_count=6}\n``` {.python .cell-code .code-overflow-wrap code-fold=\"true\" code-summary=\"hide / show code\"}\nfrom openai import OpenAI\nimport os\n#from secret_keys import OPENAI_KEY\n\nclient = OpenAI(api_key=OPENAI_KEY)\n\nresponse = client.images.generate(\n  model=\"dall-e-3\",\n  prompt= 'I want a cartoon image of a a father and his two daughters  in their kitchen putting a dish into the oven with the healthy banana bread batter they just made.  The two daughter are Nora and Tess, Nora is wearing a sparkly dress and Tess is wearing  paw patrol shirt with pink pants.' ,\n  size=\"1024x1024\",\n  quality=\"standard\",\n  n=1,\n)\n\nimage_url = response.data[0].url  \n```\n:::\n\n\n#### Nora's Image\n\nI used Nora's prompt as image for this article.\n\n![](./nora_image.jpg)\n\n\n#### Matt's image\n\nI also create an image, but lost the prompt.  But needless to say, it included me wearing  Tottenham Hotspur gear.\n\n![](./matt_image.jpg)\n\n\n###\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}